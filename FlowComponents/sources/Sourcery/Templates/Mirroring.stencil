import Foundation
import Models

{% macro associatedValueVarMultiType case %}({% for associatedValue in case.associatedValues %}{% if associatedValue.localName != nil %}{{ associatedValue.localName }}:{% endif %}{% if associatedValue.type.name != nil %}{{ associatedValue.type.name }}{% else %}{{ associatedValue.typeName }}{% endif %}{% if associatedValue.isOptional %}?{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})
{% endmacro %}
{% macro associatedValueVarUnitType case %}{% if associatedValue.localName != nil %}{{ associatedValue.localName }}:{% endif %}{% if case.associatedValues.first.type.name != nil %}{{ case.associatedValues.first.type.name }}?{% else %}{{ case.associatedValues.first.typeName }}{% endif %}{% endmacro %}
{% macro containsInheritedTypes case typeName %}
    {% for inheritedType in case.inheritedTypes %}
        {% if inheritedType|contains: typeName %}
            "true"
        {% endif %}
    {% endfor %}
{% endmacro %}
{% macro isContaingVariableName case variableName %}
    {% for variable in case.allVariables %}
        
        {% if variable.name == variableName %}
            "true"
        {% endif %}
    {% endfor %}
{% endmacro %}
{% for type in types.classes %}
    {% set isInheritedFromViewModel %} {% call containsInheritedTypes type "ViewModel" %} {% endset %}
    {% if isInheritedFromViewModel|contains:"true" %}
    
public extension {{ type.name }} {

        {% for variable in type.storedVariables %}
            {% set isInheritedPropertyMirroring %}
                {% call containsInheritedTypes variable.type "Model" %}
            {% endset %}
            
            {% if isInheritedPropertyMirroring|contains:"true" %}
                {% for mirroredVariable in variable.type.storedVariables %}
                
                {% set mirroredVariableName %}{{ variable.name|lowerFirstLetter }}{{ mirroredVariable.name|upperFirstLetter }}{% endset %}
                
                {% set isParentDefineIt %}
                    {% call isContaingVariableName type mirroredVariableName %}
                {% endset %}
                
                {% set varclass %}{% if mirroredVariable.associatedValues.all.count > 1 %}{% call associatedValueVarMultiType mirroredVariable %}{% else %}{% call associatedValueVarUnitType mirroredVariable %}{% endif %}{% endset %}
                {% if not isParentDefineIt|contains:"true" %}
    var {{mirroredVariableName}}: {{varclass}} {
    
        return self.{{ variable.name|lowerFirstLetter }}.{{ mirroredVariable.name }}
    }
                {% endif %}
                {% endfor %}
            {% endif %}
        {% endfor %}
}

    {% endif %}
{% endfor %}
